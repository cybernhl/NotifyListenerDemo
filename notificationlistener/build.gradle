plugins {
    id 'com.android.library'
    id 'maven-publish'
}

group = "com.llw.notify"
version = "1.0.0"

android {
    compileSdk 35

    defaultConfig {
        namespace "com.llw.notify"
        minSdkVersion 21
        targetSdk 35
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/*'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/*.kotlin_module'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/io.netty.versions.properties'
    }
}

dependencies {

}

afterEvaluate {
    def variants = android.libraryVariants.findAll { variant ->
        variant.buildType.name == "release" || variant.buildType.name == "debug"
    }

    variants.each { variant ->
        // 获取实际生成的 AAR 文件
        def outputFile = variant.outputs.first().outputFile

        println "Publishing variant: ${variant.name}"
        println "AAR file: ${outputFile}"

        publishing {
            publications {
                create("${variant.name}Publication", MavenPublication) {
                    groupId = project.group
                    artifactId = "${project.name}-${variant.name.toLowerCase()}"
                    version = android.defaultConfig.versionName

                    // 使用实际生成的 AAR 文件
                    artifact(outputFile) {
                        builtBy variant.assembleProvider.get()
                    }

                    // 可选：添加 POM 依赖
                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        configurations.implementation.allDependencies.each { dep ->
                            if (dep.group != null && dep.name != null && dep.version != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', dep.group)
                                dependencyNode.appendNode('artifactId', dep.name)
                                dependencyNode.appendNode('version', dep.version)
                            }
                        }
                    }
                }
            }
        }
    }

    publishing {
        repositories {
            mavenLocal()
        }
    }
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

// 修正的任务依赖关系
tasks.withType(PublishToMavenRepository) { publishTask ->
    // 获取发布任务对应的变体名称
    def publicationName = publishTask.publication?.name
    if (publicationName && publicationName.endsWith('Publication')) {
        def variantName = publicationName.replace('Publication', '')
        def assembleTask = tasks.findByName("assemble${variantName.capitalize()}")
        if (assembleTask) {
            dependsOn assembleTask
        } else {
            logger.warn("Assemble task for variant '${variantName}' not found.")
        }
    }
}